// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(cuid())
  email    String    @unique
  name     String?
  password String
  hashedRt String?
  basket   Basket?
  favorite Favorite?
  recipes  Recipe[]
}

model Basket {
  id      String   @id @default(cuid())
  userId  String   @unique
  // ingredients Ingredient[]r
  recipes Recipe[]
  user    User     @relation(fields: [userId], references: [id])
}

model Recipe {
  id           String        @id @default(cuid())
  authorId     String
  title        String
  // thumbnailId String
  thumbnail    Thumbnail?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  difficulty   Difficulty    @default(NOSCALE)
  instructions Instruction[]
  tags         RecipeTags[]

  basketsNum     Int                     @default(0)
  likesNum       Int                     @default(0)
  serving        Int                     @default(1)
  viewrs         Int                     @default(0)
  author         User                    @relation(fields: [authorId], references: [id])
  baskets        Basket[]
  favorite       Favorite[]
  ingredientsNum NumIngredientOnRecipe[]

  // @@unique([authorId, title])
}

model Instruction {
  id       String   @id @default(cuid())
  recipeId String
  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  step     Int
  title    String
  photo    String
  methods  String[]
}

model Ingredient {
  id        String                  @id @default(cuid())
  name      String                  @unique
  onRecipes NumIngredientOnRecipe[]
}

model NumIngredientOnRecipe {
  ingredientId String
  recipeId     String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  unit         String
  value        String

  @@id([recipeId, ingredientId])
}

model Favorite {
  id      String   @id @default(cuid())
  userId  String   @unique
  recipes Recipe[]
  user    User     @relation(fields: [userId], references: [id])
}

// model Item {
//   id        Int      @default(autoincrement()) @id
//   fromRecipeId Int
//   name String
//   unit String
//   value Int
//   fromRecipe Recipe @relation(fields: [fromRecipeId], references: [id])
// }

model Thumbnail {
  id       String @id @default(cuid())
  recipeId String @unique
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  s3Key    String
}

// model Image {
//   id        String @id @default(cuid())
//   // publicId  String @unique
//   format    String
//   // version  String
//   recipeId  String @unique
//   // recipe    Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
//   stepIndex Int //0:thumbnail 1~:steps
// }
model Tag {
  id        String       @id @default(cuid())
  name      String       @unique
  onRecipes RecipeTags[]
}

model RecipeTags {
  recipeId String @unique
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  tagId    String
  tag      Tag    @relation(fields: [tagId], references: [id])
}

enum Difficulty {
  DIFFICULT5
  DIFFICULT4
  MODERATE3
  EASY2
  EASY1
  NOSCALE
}
