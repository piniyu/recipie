{
  "version": 3,
  "sources": ["../../../app/components/textarea.tsx"],
  "sourcesContent": ["import { useCallback, useEffect, useRef, useState } from 'react'\nimport type {\n  ControllerFieldState,\n  ControllerRenderProps,\n  FieldValues,\n  UseFormReturn,\n  UseFormStateReturn,\n} from 'react-hook-form'\nimport { Control, Controller, useFormContext, useWatch } from 'react-hook-form'\n\nconst MyTextarea = ({\n  field,\n  maxLength,\n  rows,\n  placeholder,\n}: {\n  field: ControllerRenderProps<FieldValues, string>\n  fieldState: ControllerFieldState\n  formState: UseFormStateReturn<FieldValues>\n  // methods: UseFormReturn<FieldValues, any>\n  maxLength?: number\n  name: string\n  rows?: number\n  placeholder?: string\n  // isOptional?: boolean\n}): JSX.Element => {\n  let textareaMyRef: HTMLTextAreaElement | null = null\n  const { register, watch, control } = useFormContext()\n  // const {register ,watch}=methods\n  const { name } = field\n  const textareaRef = useCallback(\n    (v: HTMLTextAreaElement | null) => register(name).ref,\n    [name, register],\n  )\n  const watchTextarea = watch(name)\n  useEffect(() => {\n    if (textareaMyRef && window) {\n      const computedStyle = window.getComputedStyle(textareaMyRef)\n      const borderTop = +computedStyle\n        .getPropertyValue('border-top-width')\n        .replace('px', '')\n      const borderBottom = +computedStyle\n        .getPropertyValue('border-bottom-width')\n        .replace('px', '')\n\n      textareaMyRef.style.height =\n        textareaMyRef.scrollHeight + borderBottom + borderTop + 'px'\n    }\n  }, [watchTextarea, textareaMyRef])\n  return (\n    <textarea\n      {...field}\n      rows={rows}\n      className=\"input w-full resize-none align-bottom text-black\"\n      maxLength={maxLength}\n      onChange={e => {\n        // if (maxLength) {\n        //   setLength(e.target.textLength)\n        // }\n        field.onChange(e.target.value)\n      }}\n      placeholder={placeholder}\n      ref={v => {\n        textareaRef(v)\n        textareaMyRef = v\n      }}\n    />\n  )\n}\n\nexport default function Textarea({\n  methods,\n  maxLength,\n  name,\n  rows,\n  placeholder = '',\n}: {\n  methods?: UseFormReturn<FieldValues, any>\n  maxLength?: number\n  name: string\n  rows?: number\n  placeholder?: string\n  // isOptional?: boolean\n}): JSX.Element {\n  const { register, watch, control } = useFormContext()\n  const watchValue = watch(name)\n  let textareaMyRef: HTMLTextAreaElement | null = null\n  const { ref, ...rest } = register(name)\n\n  // const [length, setLength] = useState(0)\n  useEffect(() => {\n    if (textareaMyRef && window) {\n      const computedStyle = window.getComputedStyle(textareaMyRef)\n      const borderTop = +computedStyle\n        .getPropertyValue('border-top-width')\n        .replace('px', '')\n      const borderBottom = +computedStyle\n        .getPropertyValue('border-bottom-width')\n        .replace('px', '')\n\n      textareaMyRef.style.height =\n        textareaMyRef.scrollHeight + borderBottom + borderTop + 'px'\n    }\n  }, [watchValue, textareaMyRef])\n  // console.log(watchValue, name)\n  // useEffect(() => {\n  //   const subscribe = watch(value => {\n  //     setLength(value.title.length)\n  //     // console.log(value)\n  //   })\n  //   return () => {\n  //     subscribe.unsubscribe()\n  //   }\n  // }, [watch])\n  return (\n    <div className=\"relative w-full\">\n      {/* <textarea {...register(name)} /> */}\n      <textarea\n        {...rest}\n        rows={rows}\n        className={` input w-full resize-none align-bottom text-black ${\n          maxLength ? 'pb-8' : ''\n        }`}\n        maxLength={maxLength}\n        placeholder={placeholder}\n        ref={e => {\n          // register(name).ref(v)\n          ref(e)\n          textareaMyRef = e\n        }}\n      />\n      {/* <Controller\n        name={name}\n        control={control}\n        render={props => {\n          return (\n            <MyTextarea {...{ ...props, maxLength, name, rows, placeholder }} />\n          )\n        }}\n      /> */}\n\n      {maxLength !== undefined && (\n        <span className=\"absolute inline-block right-0 bottom-0 mr-2 mb-2 text-gray-400 text-xs\">\n          {watchValue ? watchValue.length : 0}/{maxLength}\n        </span>\n      )}\n    </div>\n  )\n}\n"],
  "mappings": ";;;;;;;;;;;;AAAA,mBAAyD;AAkDrD;AAoBW,SAAR,SAA0B;AAAA,EAC/B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,cAAc;AAChB,GAOgB;AACd,QAAM,EAAE,UAAU,OAAO,QAAQ,IAAI,eAAe;AACpD,QAAM,aAAa,MAAM,IAAI;AAC7B,MAAI,gBAA4C;AAChD,QAAM,EAAE,QAAQ,KAAK,IAAI,SAAS,IAAI;AAGtC,8BAAU,MAAM;AACd,QAAI,iBAAiB,QAAQ;AAC3B,YAAM,gBAAgB,OAAO,iBAAiB,aAAa;AAC3D,YAAM,YAAY,CAAC,cAChB,iBAAiB,kBAAkB,EACnC,QAAQ,MAAM,EAAE;AACnB,YAAM,eAAe,CAAC,cACnB,iBAAiB,qBAAqB,EACtC,QAAQ,MAAM,EAAE;AAEnB,oBAAc,MAAM,SAClB,cAAc,eAAe,eAAe,YAAY;AAAA,IAC5D;AAAA,EACF,GAAG,CAAC,YAAY,aAAa,CAAC;AAW9B,SACE,mDAAC,SAAI,WAAU,mBAEb;AAAA;AAAA,MAAC;AAAA;AAAA,QACE,GAAG;AAAA,QACJ;AAAA,QACA,WAAW,qDACT,YAAY,SAAS;AAAA,QAEvB;AAAA,QACA;AAAA,QACA,KAAK,OAAK;AAER,cAAI,CAAC;AACL,0BAAgB;AAAA,QAClB;AAAA;AAAA,MAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaA;AAAA,IAWC,cAAc,UACb,mDAAC,UAAK,WAAU,0EACb;AAAA,mBAAa,WAAW,SAAS;AAAA,MAAE;AAAA,MAAE;AAAA,SADxC;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,OA7BJ;AAAA;AAAA;AAAA;AAAA,SA+BA;AAEJ;",
  "names": []
}
