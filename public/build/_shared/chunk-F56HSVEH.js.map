{
  "version": 3,
  "sources": ["../../../app/components/card/card-grid.tsx", "../../../app/components/card/card.tsx"],
  "sourcesContent": ["import type { Prisma } from '@prisma/client'\nimport { useEffect, useState } from 'react'\nimport { recipesListData } from '~/lib/loaders/query-card-list'\nimport { CardListLoaderData } from '~/routes'\nimport type { CardProps } from './card'\nimport Card from './card'\n\n// type CardGridProps = {\n//   data:\n//     | (Prisma.RecipeGetPayload<typeof recipesListData> & { isLiked: boolean })[]\n//     | null\n// }\n\nexport default function CardGrid({\n  data,\n}: {\n  data: CardListLoaderData['allRecipe']\n}): JSX.Element | null {\n  const [modifiedData, setModifiedData] = useState<CardProps[]>([])\n\n  useEffect(() => {\n    if (data) {\n      const newData = data.map(recipe => ({\n        ...recipe,\n        favCounts: Math.floor(Math.random() * 1000),\n        basketCounts: Math.floor(Math.random() * 1000),\n        title: recipe.title,\n        author: recipe.author.name ?? recipe.author.id,\n        id: recipe.id,\n      }))\n      setModifiedData(newData)\n    }\n  }, [data])\n\n  if (!data) return null\n  return (\n    <div className=\"grid grid-cols-[repeat(auto-fill,minmax(300px,1fr))] gap-9\">\n      {modifiedData.map(\n        (\n          { id, title, favCounts, basketCounts, author, isLiked, isInBasket },\n          idx,\n        ) => (\n          <Card\n            key={`${title}_${idx}`}\n            {...{\n              id,\n              title,\n              favCounts,\n              basketCounts,\n              author,\n              isLiked,\n              isInBasket,\n            }}\n          />\n        ),\n      )}\n    </div>\n  )\n}\n", "import { Form, Link, useFetcher } from '@remix-run/react'\nimport { ReactNode, useEffect } from 'react'\nimport { CardListLoaderData } from '~/routes'\nimport img1 from '../../../public/assets/img1.jpeg'\nimport AuthCheck from '../auth/auth-check'\n\nexport interface CardProps {\n  title: string\n  favCounts: number\n  basketCounts: number\n  author: string\n  id: string\n  isLiked: boolean\n  isInBasket: boolean\n}\n\nfunction IconForm({\n  recipeId,\n  action,\n  icon,\n}: {\n  recipeId: string\n  action: string\n  icon: ReactNode\n}) {\n  const fetcher = useFetcher()\n  // fetcher.load(`/recipe/like/${recipeId}`)\n  // useEffect(() => {\n  // }, [fetcher, recipeId])\n  return (\n    <AuthCheck loginConfirmModal>\n      {user => (\n        <fetcher.Form method=\"post\" action={action}>\n          <button\n            type=\"submit\"\n            className=\"icon-btn-sm icon-btn-square flex \"\n            onClick={e => {\n              if (!user?.id) {\n                e.preventDefault()\n              } else {\n                e.stopPropagation()\n              }\n            }}\n          >\n            {icon}\n          </button>\n        </fetcher.Form>\n      )}\n    </AuthCheck>\n  )\n}\n\nfunction Overlay({\n  author,\n  id,\n  isLiked,\n  isInBasket,\n}: Pick<CardProps, 'author' | 'id' | 'isLiked' | 'isInBasket'>): JSX.Element {\n  return (\n    <div\n      className={`\n      opacity-0\n      invisible\n      group-hover:opacity-100 group-hover:visible\n      transition-all\n\n      absolute \n      flex items-end \n      w-full h-full \n      p-3 \n      bg-gradient-to-t from-gray-800/80 via-transparent \n       text-white\n      `}\n    >\n      <div className=\"flex-1 flex justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <span className=\"inline-flex p-0.5 rounded-full bg-white\">\n            <span className=\"material-icons-round  leading-none text-black\">\n              person\n            </span>\n          </span>\n          {author}\n        </div>\n        <div className=\"flex gap-3\">\n          <IconForm\n            recipeId={id}\n            action={`/recipe/like/${id}`}\n            icon={\n              <span\n                className={`material-symbols-rounded  leading-none ${\n                  isLiked ? 'text-red-500' : ''\n                }`}\n                style={\n                  isLiked ? { fontVariationSettings: '\"FILL\" 1' } : undefined\n                }\n              >\n                favorite\n              </span>\n            }\n          />\n          <IconForm\n            recipeId={id}\n            action={`/add-basket/${id}`}\n            icon={\n              <span\n                className={` material-symbols-rounded  leading-none ${\n                  isInBasket ? 'text-blue-500' : ''\n                }`}\n                style={\n                  isInBasket ? { fontVariationSettings: '\"FILL\" 1' } : undefined\n                }\n              >\n                shopping_basket\n              </span>\n            }\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default function Card({\n  id,\n  title,\n  favCounts,\n  basketCounts,\n  author,\n  isLiked,\n  isInBasket,\n}: CardProps): JSX.Element {\n  return (\n    <Link\n      to={`/recipe/${id}`}\n      className=\"group flex flex-col gap-2 bg-white p-2 rounded-lg shadow-gray-200/50 shadow-xl hover:shadow-gray-200 hover:shadow-2xl hover:-translate-y-2 transition-all ease-in\"\n    >\n      <div className=\"relative aspect-w-4 aspect-h-3 flex items-center justify-center overflow-hidden rounded-lg\">\n        <img className=\"w-full h-full object-cover object-center \" src={img1} />\n        <Overlay\n          author={author}\n          id={id}\n          isLiked={isLiked}\n          isInBasket={isInBasket}\n        />\n      </div>\n      <h4 className=\"line-clamp-1 text-center text-black font-medium\">\n        {title}\n      </h4>\n      <div className=\"flex justify-center gap-4\">\n        <span className=\"flex items-center gap-1 text-gray-400 text-sm\">\n          <span\n            className=\"material-symbols-outlined text-xl leading-none \"\n            style={{ fontVariationSettings: '\"wght\" 300, \"FILL\" 0' }}\n          >\n            favorite\n          </span>\n          {favCounts}\n        </span>\n        <span className=\"flex items-center gap-1 text-gray-400 text-sm\">\n          <span\n            className=\"material-symbols-outlined text-xl leading-none \"\n            style={{ fontVariationSettings: '\"wght\" 300,\"FILL\" 0' }}\n          >\n            shopping_basket\n          </span>\n          {basketCounts}\n        </span>\n      </div>\n    </Link>\n  )\n}\n"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime"]
}
