{
  "version": 3,
  "sources": ["../../../app/components/basket/basket-table/index.tsx", "../../../app/components/basket/basket-table/table-row.tsx", "../../../app/components/basket/basket-table/table-row-form.tsx", "../../../app/store/selectBasket.ts", "../../../app/routes/basket.tsx"],
  "sourcesContent": ["import { Basket, Ingredient, NumIngredientOnRecipe } from '@prisma/client'\nimport { useEffect, useMemo } from 'react'\nimport {\n  addIngredient,\n  addRecipeId,\n  IngredientsState,\n} from '../../../store/ingredients-slice'\nimport { useAppDispatch, useAppSelector } from '../../../store/configure-store'\nimport TableRow from './table-row'\nimport { addRecipeServings } from '../../../store/recipe-servings-slice'\nimport { BasketState, selectBasket } from '../../../store/selectBasket'\n\nexport type BasketTableRow = {\n  item: string\n  qat: { value: number; mes: string }\n}\n\nexport default function BasketTable({\n  data,\n}: {\n  data:\n    | (NumIngredientOnRecipe & {\n        ingredient: Ingredient\n      })[]\n    | null\n    | undefined\n}): JSX.Element {\n  const selectBasketMemo = useMemo(selectBasket, [])\n  const basket = useAppSelector(selectBasketMemo)\n  const ingredients = useAppSelector(state => state.ingredients)\n  const recipeServings = useAppSelector(state => state.recipeServings)\n  const dispatch = useAppDispatch()\n\n  // useEffect(() => {\n  //   return () => {\n  //     data?.forEach(item => {\n  //       const haslocal = basket.findIndex(\n  //         ({ name }) => name === item.ingredient.name,\n  //       )\n  //       const hasLocalIngredient = ingredients.findIndex(\n  //         ({ name }) => name === item.ingredient.name,\n  //       )\n  //       const hasLocalRecipe = recipeServings.findIndex(\n  //         recipeServing => item.recipeId === recipeServing.recipeId,\n  //       )\n\n  //       if (hasLocalIngredient > -1) {\n  //         const hasRecipeId = ingredients[\n  //           hasLocalIngredient\n  //         ].recipeIds.findIndex(id => id === item.recipeId)\n  //         if (hasRecipeId === -1) {\n  //           dispatch(\n  //             addRecipeId({\n  //               name: item.ingredient.name,\n  //               recipeId: item.recipeId,\n  //             }),\n  //           )\n  //         }\n  //       }\n\n  //       if (haslocal === -1) {\n  //         dispatch(\n  //           addIngredient({\n  //             name: item.ingredient.name,\n  //             hadQant: 0,\n  //             recipeIds: [item.recipeId],\n  //           }),\n  //         )\n  //       }\n  //       if (hasLocalRecipe === -1) {\n  //         dispatch(addRecipeServings({ recipeId: item.recipeId, servings: 1 }))\n  //       }\n  //       if (hasLocalIngredient === -1) {\n  //         dispatch(\n  //           addIngredient({\n  //             name: item.ingredient.name,\n  //             recipeIds: [item.recipeId],\n  //             hadQant: 0,\n  //           }),\n  //         )\n  //       }\n  //     })\n  //   }\n  // }, [])\n  // const setItem = (name: string): BasketState => {\n  //   if (!data) {\n  //     throw 'no data!'\n  //   }\n  //   const defaultBasket = { name, hadQant: 0, servings: 1 }\n  //   const newItem = {\n  //     name,\n  //     hadQant: defaultBasket.hadQant,\n  //     recipeIds: [...data.map(({ recipeId }) => recipeId)],\n  //   }\n  //   dispatch(addIngredient(newItem))\n  //   newItem.recipeIds.forEach(id => {\n  //     dispatch(\n  //       addRecipeServings({ recipeId: id, servings: defaultBasket.servings }),\n  //     )\n  //   })\n  //   return defaultBasket\n  // }\n  // const getItem = (baskets: BasketState[], name: string) => {\n  //   const item = baskets.find(e => e.name === name)\n  //   if (!item) {\n  //     return setItem(name)\n  //   }\n  //   return item\n  // }\n\n  return (\n    <div className=\"table table-auto w-full text-black \">\n      <div className=\"table-header-group font-medium \">\n        <div className=\"table-row \">\n          <div className=\"table-cell  text-left px-4 pt-8 pb-3 first:pl-8 last:pr-8 border-b border-gray-200\">\n            INGREDIENTS\n          </div>\n          <div className=\"table-cell w-28 text-left px-4 pt-8 pb-3 first:pl-8 last:pr-8 border-b border-gray-200\">\n            NEED\n          </div>\n          {/* <div className=\"table-cell w-4 text-center px-4 pt-8 pb-3 first:pl-8 last:pr-8 border-b border-gray-200\"></div> */}\n          <div className=\"table-cell text-left px-4 pt-8 pb-3 first:pl-8 last:pr-8 border-b border-gray-200\">\n            REQUIRE\n          </div>\n          {/* <div className=\"table-cell w-4 text-left px-4 pt-8 pb-3 first:pl-8 last:pr-8 border-b border-gray-200\"></div> */}\n          <div className=\"table-cell text-left px-4 pt-8 pb-3 first:pl-8 last:pr-8 border-b border-gray-200\">\n            HAVE\n          </div>\n          {/* <div className=\"table-cell text-center border-b-2 border-black\">\n            SERVINGS\n          </div> */}\n          <div className=\"table-cell w-8 text-left px-4 pt-8 pb-3 first:pl-8 last:pr-8 border-b border-gray-200\"></div>\n        </div>\n      </div>\n      {data?.map(({ ingredient: { name }, value, unit }, idx) => (\n        <TableRow\n          key={`${name}_${idx}`}\n          {...{\n            name,\n            value: parseInt(value),\n            unit,\n            localBasket: basket.find(\n              ingredient => ingredient.name === name,\n            ) ?? { name, hadQant: 0, servings: 1 },\n          }}\n        />\n      ))}\n    </div>\n  )\n}\n", "import { useState } from 'react'\nimport { updateHadQuan } from '../../../store/ingredients-slice'\nimport { useAppDispatch } from '../../../store/configure-store'\nimport TableRowForm from './table-row-form'\nimport { BasketState } from '../../../store/selectBasket'\n\n// const sumServing = (servings: IngredientsState['servings']) => {\n//   return servings\n//     .map(({ serving }) => {\n//       return serving\n//     })\n//     .reduce((a, b) => a + b)\n// }\n\nexport default function TableRow({\n  name,\n  value,\n  unit,\n  localBasket,\n}: {\n  name: string\n  value: number\n  unit: string\n  localBasket: BasketState\n}): JSX.Element {\n  const [isDeleted, setIsDeleted] = useState(false)\n  const dispatch = useAppDispatch()\n\n  return (\n    <div className={`relative table-row-group text-secondary `}>\n      <div className=\"table-row\">\n        <div className=\"table-cell px-4 first:pl-8 last:pr-8 py-3 \">\n          <div className=\"flex items-center\">\n            <span>{name}</span>\n          </div>\n        </div>\n        <div\n          className={`\n          relative \n          table-cell px-4 first:pl-8 last:pr-8 \n          py-3 \n          text-secondary font-bold \n          text-lg\n          `}\n        >\n          <span className=\"[background:linear-gradient(to_bottom,transparent_50%,#fbbf2490_50%)]\">\n            {value * localBasket.servings -\n              (isNaN(localBasket.hadQant) ? 0 : localBasket.hadQant) +\n              unit}\n          </span>\n        </div>\n        {/* <div className=\"table-cell px-4 first:pl-8 last:pr-8 py-3 text-gray-500\">\n          =\n        </div> */}\n        <div className=\"table-cell px-4 first:pl-8 last:pr-8 py-3\">\n          <div className=\"\">{value * localBasket.servings + unit}</div>\n        </div>\n        {/* <div className=\"table-cell px-4 first:pl-8 last:pr-8 py-3 text-gray-500\">\n          -\n        </div> */}\n        <div className=\"table-cell px-4 first:pl-8 last:pr-8 py-3 \">\n          <TableRowForm\n            {...{\n              setInputValue: (value: number) =>\n                void dispatch(updateHadQuan({ name, hadQant: value })),\n              defaultValue: localBasket?.hadQant ?? 0,\n              isDeleted,\n              value,\n              unit,\n            }}\n          />\n        </div>\n        {/* <div className=\"table-cell px-4 first:pl-8 last:pr-8 py-3 align-bottom\">\n          <TableRowForm\n            {...{\n              setInputValue: (value: number) =>\n                void dispatch(updateServings({ name, servings: value })),\n              defaultValue: localBasket?.servings ?? 1,\n              isDeleted,\n              value,\n              hasSetBtn: true,\n            }}\n          />\n        </div> */}\n        <div className=\"table-cell px-4 first:pl-8 last:pr-8 align-middle py-3 text-gray-500\">\n          <button\n            className=\"flex p-1\"\n            onClick={() => {\n              setIsDeleted(prev => !prev)\n            }}\n          >\n            <span\n              className={`material-symbols-outlined leading-none ${\n                isDeleted ? 'text-green-500' : 'text-red-600'\n              }`}\n            >\n              {isDeleted ? 'undo' : 'delete'}\n            </span>\n          </button>\n        </div>\n      </div>\n      {isDeleted && (\n        <div\n          className=\"absolute top-0 left-0  h-full bg-white/50 mix-blend-screen\"\n          style={{ width: 'calc(100% - 56px)' }}\n        ></div>\n      )}\n    </div>\n  )\n}\n", "import { useEffect, useRef, useState } from 'react'\nimport { FormProvider, useForm } from 'react-hook-form'\nimport { BasketTableRow } from '.'\nimport NumberInput from '../../inputs/number-input'\n\nexport default function TableRowForm({\n  value,\n  unit,\n  setInputValue,\n  isDeleted,\n  hasSetBtn,\n  defaultValue,\n}: {\n  value: number\n  unit?: string\n  setInputValue: (value: number) => void\n  isDeleted: boolean\n  hasSetBtn?: boolean\n  defaultValue: number | undefined\n}) {\n  const methods = useForm<{ input: number }>({\n    mode: 'onChange',\n  })\n  const { reset, watch } = methods\n\n  useEffect(() => {\n    if (defaultValue) {\n      reset({ input: defaultValue })\n      console.log(defaultValue)\n    }\n  }, [defaultValue, reset])\n\n  useEffect(() => {\n    const subscription = watch(v => {\n      if (v.input) {\n        setInputValue(v.input)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [setInputValue, watch])\n\n  return (\n    <FormProvider {...methods}>\n      <form className=\"relative flex items-stretch \">\n        <NumberInput\n          registerName=\"input\"\n          maxValue={value}\n          showErrors\n          unit={unit}\n        />\n      </form>\n    </FormProvider>\n  )\n}\n", "import { createSelector } from '@reduxjs/toolkit'\nimport type { RootState } from './configure-store'\nimport type { IngredientsState } from './ingredients-slice'\n\nconst ingredientsSelector = (state: RootState) => state.ingredients\nconst recipeServingsSelector = (state: RootState) => state.recipeServings\n\nexport type BasketState = Pick<IngredientsState, 'name' | 'hadQant'> & {\n  servings: number\n}\n\nexport const selectBasket = () =>\n  createSelector(\n    ingredientsSelector,\n    recipeServingsSelector,\n    (ingredients, recipes) => {\n      const basket = ingredients.map(ingredient => {\n        const newServings = ingredient.recipeIds.map(\n          id => recipes.find(item => item.recipeId === id)?.servings ?? 0,\n        )\n        return {\n          name: ingredient.name,\n          hadQant: ingredient.hadQant,\n          servings:\n            newServings.length > 0 ? newServings.reduce((a, b) => a + b, 0) : 0,\n        }\n      })\n      return basket\n    },\n  )\n", "import type { Basket, Ingredient, NumIngredientOnRecipe } from '@prisma/client'\nimport { Recipe } from '@prisma/client'\nimport {\n  ActionFunction,\n  json,\n  LoaderFunction,\n  MetaFunction,\n} from '@remix-run/node'\nimport { Outlet, useFetcher, useLoaderData, useSubmit } from '@remix-run/react'\nimport BasketTable from '~/components/basket/basket-table'\nimport ContentCard from '~/components/card/content-card'\nimport { metaTitlePostfix } from '~/root'\nimport { db } from '~/utils/db.server'\nimport { requireUserId } from '~/utils/session.server'\n\ntype LoaderData = {\n  basket: Basket & {\n    recipes: {\n      title: string\n      id: string\n      ingredientsNum: (NumIngredientOnRecipe & {\n        ingredient: Ingredient\n      })[]\n    }[]\n  }\n  ingredients: (NumIngredientOnRecipe & {\n    ingredient: Ingredient\n  })[]\n} | null\n\nexport const meta: MetaFunction = () => ({\n  charset: 'utf-8',\n  title: 'Basket' + metaTitlePostfix,\n})\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const userId = await requireUserId(request)\n  const basket = await db.basket.findUnique({\n    where: { userId },\n    include: {\n      recipes: {\n        select: {\n          title: true,\n          id: true,\n          ingredientsNum: { include: { ingredient: true } },\n        },\n      },\n    },\n  })\n  let ingredients: (NumIngredientOnRecipe & {\n    ingredient: Ingredient\n  })[] = []\n  basket?.recipes.forEach(({ ingredientsNum }) => {\n    const foundIng = ingredients.find(\n      ({ ingredientId }) => ingredientId === ingredientsNum[0].ingredientId,\n    )\n    if (foundIng) {\n      foundIng.value += ingredientsNum[0].value\n    } else {\n      ingredients = ingredients.concat(ingredientsNum)\n    }\n  })\n\n  return json({ basket, ingredients })\n}\n\nexport default function BasketIndex(): JSX.Element {\n  const data = useLoaderData<LoaderData>()\n\n  // useEffect(() => {\n  //   if (searchValue.length === 0) {\n  //     return\n  //   }\n  //   const timeOut = setTimeout(() => {\n  //   }, 200)\n\n  //   return () => {\n  //     clearTimeout(timeOut)\n  //   }\n  // }, [searchValue])\n\n  return (\n    <div className=\"layout-py layout-px\">\n      <div className=\"max-w-6xl mx-auto grid [grid-template-areas:'header_header''ingredients_sideList'] grid-rows-[auto,1fr] grid-cols-[3fr,2fr] gap-6\">\n        <h2>Basket</h2>\n        <div className=\"[grid-area:ingredients] \">\n          {/* --- table --- */}\n          <ContentCard className=\"!p-0\">\n            <BasketTable data={data?.ingredients} />\n          </ContentCard>\n          {/* --- /table --- */}\n        </div>\n        <ContentCard className=\"[grid-area:sideList] flex flex-col gap-8 h-full \">\n          <Outlet />\n        </ContentCard>\n      </div>\n    </div>\n  )\n}\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "import_jsx_dev_runtime", "value", "import_jsx_dev_runtime", "import_jsx_dev_runtime"]
}
