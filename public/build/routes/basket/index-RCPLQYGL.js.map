{
  "version": 3,
  "sources": ["../../../../app/routes/basket/index.tsx"],
  "sourcesContent": ["import {\n  Basket,\n  Ingredient,\n  NumIngredientOnRecipe,\n  Recipe,\n} from '@prisma/client'\nimport { ActionFunction, json, LoaderFunction } from '@remix-run/node'\nimport { useFetcher, useLoaderData, useTransition } from '@remix-run/react'\nimport { useEffect, useState } from 'react'\nimport { useAppDispatch, useAppSelector } from '../../store/configure-store'\nimport {\n  addIngredient,\n  addRecipeId,\n  deleteRecipeId,\n} from '../../store/ingredients-slice'\nimport {\n  addRecipeServings,\n  deleteRecipeServings,\n} from '../../store/recipe-servings-slice'\nimport RecipeServingsForm from '~/components/basket/recipe-servings-form'\nimport CardListItem from '~/components/card/card-list-item'\nimport SearchBar from '~/components/search-bar'\nimport { db } from '~/utils/db.server'\n\ntype LoaderData = {\n  basket: Basket & {\n    recipes: {\n      title: string\n      id: string\n      ingredientsNum: (NumIngredientOnRecipe & {\n        ingredient: Ingredient\n      })[]\n    }[]\n  }\n  ingredients: (NumIngredientOnRecipe & {\n    ingredient: Ingredient\n  })[]\n  list: string[]\n} | null\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const basket = await db.basket.findUnique({\n    where: { userId: 'testuser0' },\n    include: {\n      recipes: {\n        select: {\n          title: true,\n          id: true,\n          ingredientsNum: { include: { ingredient: true } },\n        },\n      },\n    },\n  })\n\n  const url = new URL(request.url)\n  const query = url.searchParams.get('search') ?? ''\n  const res = (async () => {\n    if (query.length === 0) {\n      return [null]\n    } else {\n      const recipes = await db.recipe.findMany({\n        where: {\n          AND: [\n            { baskets: { some: { id: 'testbasket0' } } },\n            { title: { contains: query } },\n          ],\n        },\n        take: 10,\n      })\n      return recipes\n    }\n  })()\n\n  const list = (await res).map(v => {\n    if (v === null) return v\n    return v.title\n  })\n\n  return { basket, list }\n}\nexport const action: ActionFunction = async ({ request }) => {\n  const form = await request.formData()\n  const id = form.get('deleteId')\n  if (id) {\n    await db.basket.update({\n      where: { id: 'testbasket0' },\n      data: { recipes: { disconnect: { id: id.toString() } } },\n    })\n  }\n  return json({})\n}\n\nexport default function BasketSidePanel() {\n  const data = useLoaderData<LoaderData>()\n  const fetcher = useFetcher<LoaderData>()\n  const servings = useAppSelector(state => state.recipeServings)\n  const dispatch = useAppDispatch()\n  const [resList, setResList] = useState<string[] | null>(null)\n\n  useEffect(() => {\n    data?.basket.recipes.forEach(({ id, ingredientsNum }) => {\n      dispatch(addRecipeServings({ recipeId: id, servings: 1 }))\n      ingredientsNum.forEach(({ ingredient }) => {\n        dispatch(\n          addIngredient({ name: ingredient.name, recipeIds: [id], hadQant: 0 }),\n        )\n        dispatch(addRecipeId({ name: ingredient.name, recipeId: id }))\n      })\n    })\n  }, [data?.basket.recipes, dispatch])\n\n  const onSearch = (inputValue: string) => {\n    fetcher.load(`/basket?index&search=${inputValue}`)\n  }\n\n  useEffect(() => {\n    if (fetcher.data?.list) {\n      setResList(fetcher.data.list)\n    }\n  }, [fetcher.data?.list])\n\n  return (\n    <>\n      <SearchBar\n        placeholder=\"Basket Search\"\n        border\n        fetch={onSearch}\n        list={resList?.map(item => ({ id: '', value: item }))}\n      />\n      <div>\n        <h4 className=\"mb-4 font-bold text-black\">Recipes in basket</h4>\n\n        {data?.basket.recipes &&\n          data?.basket.recipes.map(({ title, id, ingredientsNum }, idx) => {\n            return (\n              <CardListItem\n                key={`${title}_${idx}`}\n                title={title}\n                recipeId={id}\n                onDelete={(e: React.FormEvent) => {\n                  ingredientsNum.forEach(item => {\n                    dispatch(\n                      deleteRecipeId({\n                        name: item.ingredient.name,\n                        recipeId: id,\n                      }),\n                    )\n                  })\n                  dispatch(deleteRecipeServings({ recipeId: id }))\n                  fetcher.submit(e.currentTarget as HTMLFormElement, {\n                    action: '/basket?index',\n                  })\n                }}\n                subTitle={\n                  <RecipeServingsForm\n                    recipeId={id}\n                    // ingredients={ingredientsNum}\n                    defaultValue={\n                      servings.find(item => item.recipeId === id)?.servings\n                    }\n                  />\n                }\n              />\n            )\n          })}\n      </div>\n    </>\n  )\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAAA,gBAAoC;AAcpC,gBAAmB;AAoGf;AA9BW,SAAR,kBAAmC;AA5F1C;AA6FE,QAAM,OAAO,cAA0B;AACvC,QAAM,UAAU,WAAuB;AACvC,QAAM,WAAW,eAAe,WAAS,MAAM,cAAc;AAC7D,QAAM,WAAW,eAAe;AAChC,QAAM,CAAC,SAAS,UAAU,QAAI,wBAA0B,IAAI;AAE5D,+BAAU,MAAM;AACd,iCAAM,OAAO,QAAQ,QAAQ,CAAC,EAAE,IAAI,eAAe,MAAM;AACvD,eAAS,kBAAkB,EAAE,UAAU,IAAI,UAAU,EAAE,CAAC,CAAC;AACzD,qBAAe,QAAQ,CAAC,EAAE,WAAW,MAAM;AACzC;AAAA,UACE,cAAc,EAAE,MAAM,WAAW,MAAM,WAAW,CAAC,EAAE,GAAG,SAAS,EAAE,CAAC;AAAA,QACtE;AACA,iBAAS,YAAY,EAAE,MAAM,WAAW,MAAM,UAAU,GAAG,CAAC,CAAC;AAAA,MAC/D,CAAC;AAAA,IACH;AAAA,EACF,GAAG,CAAC,6BAAM,OAAO,SAAS,QAAQ,CAAC;AAEnC,QAAM,WAAW,CAAC,eAAuB;AACvC,YAAQ,KAAK,wBAAwB,YAAY;AAAA,EACnD;AAEA,+BAAU,MAAM;AAnHlB,QAAAC;AAoHI,SAAIA,MAAA,QAAQ,SAAR,gBAAAA,IAAc,MAAM;AACtB,iBAAW,QAAQ,KAAK,IAAI;AAAA,IAC9B;AAAA,EACF,GAAG,EAAC,aAAQ,SAAR,mBAAc,IAAI,CAAC;AAEvB,SACE,sFACE;AAAA;AAAA,MAAC;AAAA;AAAA,QACC,aAAY;AAAA,QACZ,QAAM;AAAA,QACN,OAAO;AAAA,QACP,MAAM,mCAAS,IAAI,WAAS,EAAE,IAAI,IAAI,OAAO,KAAK;AAAA;AAAA,MAJpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA;AAAA,IACA,mDAAC,SACC;AAAA,yDAAC,QAAG,WAAU,6BAA4B,iCAA1C;AAAA;AAAA;AAAA;AAAA,aAA2D;AAAA,OAE1D,6BAAM,OAAO,aACZ,6BAAM,OAAO,QAAQ,IAAI,CAAC,EAAE,OAAO,IAAI,eAAe,GAAG,QAAQ;AArI3E,YAAAA;AAsIY,eACE;AAAA,UAAC;AAAA;AAAA,YAEC;AAAA,YACA,UAAU;AAAA,YACV,UAAU,CAAC,MAAuB;AAChC,6BAAe,QAAQ,UAAQ;AAC7B;AAAA,kBACE,eAAe;AAAA,oBACb,MAAM,KAAK,WAAW;AAAA,oBACtB,UAAU;AAAA,kBACZ,CAAC;AAAA,gBACH;AAAA,cACF,CAAC;AACD,uBAAS,qBAAqB,EAAE,UAAU,GAAG,CAAC,CAAC;AAC/C,sBAAQ,OAAO,EAAE,eAAkC;AAAA,gBACjD,QAAQ;AAAA,cACV,CAAC;AAAA,YACH;AAAA,YACA,UACE;AAAA,cAAC;AAAA;AAAA,gBACC,UAAU;AAAA,gBAEV,eACEA,MAAA,SAAS,KAAK,UAAQ,KAAK,aAAa,EAAE,MAA1C,gBAAAA,IAA6C;AAAA;AAAA,cAJjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAMA;AAAA;AAAA,UAxBG,GAAG,SAAS;AAAA,UADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA2BA;AAAA,MAEJ;AAAA,SAnCJ;AAAA;AAAA;AAAA;AAAA,WAoCA;AAAA,OA3CF;AAAA;AAAA;AAAA;AAAA,SA4CA;AAEJ;",
  "names": ["import_react", "_a"]
}
