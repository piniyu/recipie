{
  "version": 3,
  "sources": ["../../../app/routes/recipe.$recipeId.modal.tsx"],
  "sourcesContent": ["// import { CloseOutlined } from '@mui/icons-material'\nimport type { LoaderFunction } from '@remix-run/node'\nimport { json } from '@remix-run/node'\nimport {\n  Link,\n  useFetcher,\n  useLoaderData,\n  useParams,\n  useSearchParams,\n} from '@remix-run/react'\nimport React, { useCallback, useContext, useEffect } from 'react'\nimport { useRef, useState } from 'react'\nimport { SiderContext } from '../components/sider/sider-context'\nimport { useIntersect } from '../lib/useIntersect'\nimport img1 from '../../public/assets/img1.jpeg'\n\ntype MockData = {\n  id: string\n  title: string\n  steps: { id: string; timeStemp: null | string; text: string }[]\n}\n\nconst mockData: MockData[] = [\n  {\n    id: '1',\n    title: 'Preparation',\n    steps: [\n      {\n        id: '1',\n        timeStemp: null,\n        text: 'Preheated 400 degrees F (200 degrees C) oven for 5 to 8 minutes',\n      },\n      {\n        id: '2',\n        timeStemp: null,\n        text: 'Preheated 400 degrees F (200 degrees C) oven for 5 to 8 minutes',\n      },\n      {\n        id: '3',\n        timeStemp: null,\n        text: 'Preheated 400 degrees F (200 degrees C) oven for 5 to 8 minutes',\n      },\n      {\n        id: '4',\n        timeStemp: null,\n        text: 'Preheated 400 degrees F (200 degrees C) oven for 5 to 8 minutes',\n      },\n    ],\n  },\n  {\n    id: '2',\n    title: 'Preparation',\n    steps: [\n      {\n        id: '1',\n        timeStemp: null,\n        text: 'Preheated 400 degrees F (200 degrees C) oven for 5 to 8 minutes',\n      },\n    ],\n  },\n  {\n    id: '3',\n    title: 'Preparation',\n    steps: [\n      {\n        id: '1',\n        timeStemp: null,\n        text: 'Preheated 400 degrees F (200 degrees C) oven for 5 to 8 minutes',\n      },\n    ],\n  },\n  {\n    id: '4',\n    title: 'Preparation',\n    steps: [\n      {\n        id: '1',\n        timeStemp: null,\n        text: 'Preheated 400 degrees F (200 degrees C) oven for 5 to 8 minutes',\n      },\n    ],\n  },\n  {\n    id: '5',\n    title: 'Preparation',\n    steps: [\n      {\n        id: '1',\n        timeStemp: null,\n        text: 'Preheated 400 degrees F (200 degrees C) oven for 5 to 8 minutes',\n      },\n    ],\n  },\n]\n\nexport const loader: LoaderFunction = async ({ request, params, context }) => {\n  const checkStep = (step: number) => {\n    return step > 0 ? step - 1 : 0\n  }\n  const step = checkStep(Number(new URL(request.url).searchParams.get('step')))\n\n  return json([mockData[step], mockData[step + 1]])\n}\n\nconst ModalContainer = ({\n  children,\n  onPrevious,\n  onNext,\n  showNext,\n  showPrevious,\n}: {\n  children: React.ReactNode\n  onPrevious: () => void\n  onNext: () => void\n  showNext: boolean\n  showPrevious: boolean\n}) => {\n  const { recipeId } = useParams()\n  return (\n    <div\n      className=\"h-screen bg-gray-100 overflow-auto [scroll-snap-type:y_mandatory]\"\n      // ref={rootRef}\n    >\n      {children}\n      <button\n        onClick={onPrevious}\n        className={`\n        fixed \n        w-24 \n        btn-ghost btn-sm \n        top-2 left-[calc(50vw_-_48px)] \n        flex-col \n        bg-gray-200/70 backdrop-blur-md \n        text-gray-500 \n        select-none\n        hover:animate-bounce-y-down\n        ${showPrevious ? '' : 'pointer-events-none invisible'}`}\n      >\n        <span className=\"material-symbols-rounded block\">arrow_upward</span>\n        Previous\n      </button>\n      <button\n        onClick={onNext}\n        id=\"next_btn\"\n        className={`\n        fixed \n        w-24 \n        btn-ghost btn-md \n        flex-col \n        bottom-2 left-[calc(50vw_-_48px)]\n        bg-gray-200/70 backdrop-blur-md \n        text-black\n        select-none \n        hover:animate-bounce-y-up\n        ${showNext ? '' : 'pointer-events-none invisible'}`}\n      >\n        Next\n        <span className=\"material-symbols-rounded block\">arrow_downward</span>\n      </button>\n      <Link\n        to={`/recipe/${recipeId}`}\n        className=\"fixed w-fit top-0 right-[10px] btn-ghost btn-md justify-end text-gray-500 \"\n      >\n        <span className=\"material-symbols-rounded\">close</span>\n      </Link>\n    </div>\n  )\n}\n\nexport default function RecipeModal(): JSX.Element {\n  const { setHidden } = useContext(SiderContext)\n  const data: MockData[] = useLoaderData()\n  const [stepData, setStepData] = useState(data)\n  const [stepInView, setStepInView] = useState(1)\n  const [maxStep, setMaxStep] = useState(Infinity)\n\n  const fetcher = useFetcher()\n\n  const [shouldFetch, setShouldFetch] = useState(true)\n  const [hasData, setHasData] = useState(true)\n  const [targets, setTergets] = useState<HTMLDivElement[]>([])\n  const [nextStep, setNextStep] = useState(3)\n\n  useEffect(() => {\n    setHidden(true)\n    return () => {\n      setHidden(false)\n    }\n  }, [setHidden])\n\n  const targetRef = useCallback((node: HTMLDivElement | null) => {\n    if (node !== null) {\n      const idx = node.getAttribute('data-key')\n      if (idx) {\n        setTergets(prev => {\n          const arr = [...prev]\n          arr[+idx] = node\n          return arr\n        })\n      }\n    }\n  }, [])\n\n  //infinite scrolling intersect\n\n  // useEffect(() => {\n  //   console.log(stepInView, maxStep)\n  // }, [maxStep, stepInView])\n  useEffect(() => {\n    const options = {\n      threshold: 1,\n    }\n    const onIntersect: IntersectionObserverCallback = (entries, observer) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          const key = entry.target.getAttribute('data-key')\n          // console.log(key)\n          if (\n            key &&\n            +key === targets.length - 2 &&\n            +key % 2 === 0 &&\n            +key !== maxStep - 1 &&\n            maxStep === Infinity\n          ) {\n            console.log('fetch', nextStep)\n            setShouldFetch(true)\n            setNextStep(parseInt(key) + 3)\n            // console.log(idx + 2)\n          }\n          if (key) {\n            // step.current = idx + 1\n            // entry.target.scrollIntoView({ behavior: 'smooth', block: 'center' })\n            // console.log(entry.target)\n            setStepInView(parseInt(key) + 1)\n          }\n        }\n      })\n    }\n    const observer = new IntersectionObserver(onIntersect, options)\n    if (targets.length > 0) {\n      targets.forEach(target => {\n        observer.observe(target)\n      })\n    }\n    return () => {\n      observer.disconnect()\n    }\n  }, [maxStep, targets, targets.length])\n\n  // fetch data\n  useEffect(() => {\n    // console.log(startStepRef.current)\n    // console.log(nextStep, targets.length)\n    if (!shouldFetch || !hasData) {\n      return\n    }\n    fetcher.load(`/recipe/modal?step=${nextStep}`)\n    setShouldFetch(false)\n  }, [fetcher, hasData, nextStep, shouldFetch])\n\n  // console.log('render')\n\n  // fetcher data change\n  useEffect(() => {\n    if (fetcher.data && fetcher.data[0] === null) {\n      setHasData(false)\n      setShouldFetch(false)\n      // setMaxStep(nextStep - 1)\n      return\n    }\n    if (fetcher.data && fetcher.data[1] === null) {\n      setStepData(prev => [...prev, fetcher.data[0]])\n      setHasData(false)\n      setShouldFetch(false)\n      return\n    }\n    if (fetcher.data) {\n      setStepData(prev => [...prev, ...fetcher.data])\n      // setNextStep(prev => prev + 1)\n    }\n  }, [fetcher.data])\n\n  useEffect(() => {\n    if (!hasData) {\n      setMaxStep(targets.length)\n    }\n  }, [hasData, targets.length])\n\n  return (\n    <ModalContainer\n      showNext={stepInView !== maxStep}\n      showPrevious={stepInView !== 1}\n      onPrevious={() => {\n        targets[stepInView - 2].scrollIntoView({\n          block: 'center',\n          behavior: 'smooth',\n        })\n        setStepInView(prev => prev - 1)\n      }}\n      onNext={() => {\n        targets[stepInView].scrollIntoView({\n          block: 'center',\n          behavior: 'smooth',\n        })\n        setStepInView(prev => prev + 1)\n      }}\n    >\n      {stepData?.map(({ id, title, steps }, idx) => {\n        return (\n          <div\n            key={id}\n            data-key={idx}\n            className=\"max-w-7xl h-screen flex justify-center mx-auto space-x-6 scroll-m-0 py-20 px-8 [scroll-snap-align:center] \"\n            ref={targetRef}\n          >\n            <div className=\"w-full  flex items-center\">\n              <div\n                className={`flex-1 w-full h-full max-h-[70vh] p-5 rounded-2xl bg-white shadow-2xl `}\n                // style={{ backgroundImage: `url(${img1})` }}\n              >\n                <img\n                  src={img1}\n                  alt=\"step-img\"\n                  className=\"w-full h-full object-cover object-center rounded-2xl\"\n                />\n              </div>\n            </div>\n            <div className=\" w-2/5 flex-shrink-0 flex flex-col\">\n              <div className=\"overflow-y-auto flex-1\">\n                <div className=\"mt-2 mb-14 text-center\">\n                  <h4 className=\"text-primary-400 font-medium\">STEP {id}</h4>\n                  <h2 className=\"text-black\">{title}</h2>\n                </div>\n                <ul className=\" pl-14 pr-14 list-disc text-black marker:text-gray-300 marker:text-xl marker:leading-none\">\n                  {steps.map(({ text, id }) => (\n                    <li key={id} className=\"mb-8\">\n                      <span className=\"relative left-1 \">{text}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </div>\n        )\n      })}\n    </ModalContainer>\n  )\n}\n"],
  "mappings": "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",
  "names": ["import_react", "observer", "id"]
}
