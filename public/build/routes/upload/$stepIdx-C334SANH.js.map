{
  "version": 3,
  "sources": ["../../../../app/routes/upload/$stepIdx.tsx", "../../../../app/components/methods-field-array.tsx", "../../../../app/components/step-form.tsx"],
  "sourcesContent": ["import { useNavigate, useParams } from '@remix-run/react'\nimport { useEffect } from 'react'\nimport { FormProvider, useForm } from 'react-hook-form'\nimport { v4 as uuidv4 } from 'uuid'\nimport type { StepFormProps } from '~/components/step-form'\nimport StepForm from '~/components/step-form'\nimport { useAppDispatch, useAppSelector } from '~/store/configure-store'\nimport { addStep, updateStep } from '~/store/upload-temp/step-form-slice'\n\nconst defaultValues: StepFormProps = {\n  title: '',\n  methods: [{ content: '', timeStamp: '' }],\n}\nexport default function StepsPage(): JSX.Element {\n  const { stepIdx } = useParams()\n  const dispatch = useAppDispatch()\n  const navigate = useNavigate()\n\n  const localStepForms = useAppSelector(state => state.stepForm)\n  const localStepForm = stepIdx ? localStepForms[+stepIdx - 1] : undefined\n\n  const methods = useForm<StepFormProps>({\n    defaultValues: localStepForm ? localStepForm : defaultValues,\n    shouldUnregister: true,\n  })\n  const { handleSubmit, reset, getValues } = methods\n\n  useEffect(() => {\n    // if (!localStepForm && stepIdx) {\n    //   dispatch(\n    //     addStep({\n    //       title: '',\n    //       id: uuidv4(),\n    //       methods: [{ timeStamp: '', content: '' }],\n    //     }),\n    //   )\n    // }\n    if (localStepForm) {\n      reset(localStepForm)\n    }\n  }, [dispatch, localStepForm, reset, stepIdx])\n\n  useEffect(() => {\n    return () => {\n      const formValue = getValues()\n      if (formValue && localStepForm) {\n        dispatch(\n          updateStep({\n            title: formValue.title,\n            methods: formValue.methods,\n            id: localStepForm.id,\n          }),\n        )\n      }\n    }\n  }, [dispatch, getValues, localStepForm, stepIdx])\n\n  const onSubmit = (v: StepFormProps) => {\n    if (localStepForm) {\n      dispatch(\n        updateStep({\n          title: v.title,\n          methods: v.methods,\n          id: localStepForm.id,\n        }),\n      )\n    }\n  }\n  const onSubmitAdd = (v: StepFormProps) => {\n    if (stepIdx && !localStepForms[+stepIdx]) {\n      dispatch(\n        addStep({\n          title: '',\n          methods: [{ timeStamp: '', content: '' }],\n          id: uuidv4(),\n        }),\n      )\n    }\n  }\n\n  return (\n    <div className=\"space-y-12\">\n      <h3 className=\"font-medium text-primary-600\">Step {stepIdx}</h3>\n      <FormProvider {...methods}>\n        <StepForm />\n      </FormProvider>\n      <div className=\"flex gap-4\">\n        {stepIdx && stepIdx !== '1' ? (\n          <button\n            className=\"btn-sm btn-gray\"\n            onClick={() => {\n              handleSubmit(onSubmit)()\n              navigate(`../${+stepIdx - 1}`)\n            }}\n            type=\"submit\"\n          >\n            Previous\n          </button>\n        ) : null}\n\n        {stepIdx ? (\n          <button\n            className=\"btn-sm btn-primary\"\n            onClick={() => {\n              handleSubmit(onSubmitAdd)()\n              navigate(`../${+stepIdx + 1}`)\n            }}\n            type=\"submit\"\n          >\n            Next step\n          </button>\n        ) : null}\n      </div>\n    </div>\n  )\n}\n", "import {\n  Controller,\n  FieldValues,\n  useFieldArray,\n  useFormContext,\n  UseFormReturn,\n} from 'react-hook-form'\nimport Textarea from './textarea'\n\nconst regexNum = new RegExp('^[0-9]$')\nconst regexChar = new RegExp('^[a-zA-Z]$')\n\nconst TimeInput = ({\n  name,\n  ...methods\n}: { name: string } & UseFormReturn<FieldValues, any>): JSX.Element => {\n  const { register, control, watch, setValue } = methods\n  const watchValue = watch(name)\n  return (\n    // <Controller\n    //   name={name}\n    //   control={control}\n    //   render={({ field }) => (\n    <input\n      {...register(name)}\n      type=\"text\"\n      className=\"input w-20 text-right\"\n      placeholder=\"0:00\"\n      onKeyDown={e => {\n        if (\n          watchValue.length === 4 &&\n          // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9,].includes(parseInt(e.key))\n          regexNum.test(e.key)\n        ) {\n          e.preventDefault()\n        }\n        if (regexChar.test(e.key)) {\n          e.preventDefault()\n        }\n      }}\n      onFocus={e => {\n        setValue(name, e.target.value.replace(':', ''))\n      }}\n      onBlur={e => {\n        const arr = e.target.value.split('')\n        while (arr.length < 4) {\n          arr.unshift('0')\n        }\n        const length = arr.length\n        arr.splice(length - 2, 0, ':')\n        setValue(name, arr.join(''))\n      }}\n    />\n    // )}\n    // />\n  )\n}\n\nexport default function MethodsFieldArray({\n  name,\n}: {\n  name: string\n}): JSX.Element {\n  const methods = useFormContext()\n  const { register, control, setValue } = methods\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name,\n  })\n  return (\n    <ul className=\"space-y-4\">\n      {fields.map((field, idx) => {\n        return (\n          <div key={field.id}>\n            <div className=\"flex gap-4\">\n              <TimeInput {...methods} name={`${name}.${idx}.timeStemp`} />\n              <Textarea\n                {...methods}\n                name={`${name}.${idx}.content`}\n                rows={1}\n                placeholder=\"Method\"\n              />\n              <button\n                type=\"button\"\n                className=\"btn-ghost\"\n                onClick={() => {\n                  remove(idx)\n                }}\n                disabled={fields.length === 1}\n              >\n                Delet\n              </button>\n            </div>\n          </div>\n        )\n      })}\n      <button\n        className=\"btn-sm btn-border\"\n        type=\"button\"\n        onClick={() => {\n          append({ content: '', timeStemp: '' })\n        }}\n      >\n        Add a method\n      </button>\n    </ul>\n  )\n}\n", "import { useNavigate } from '@remix-run/react'\nimport { useCallback, useContext } from 'react'\nimport { FormProvider, useForm } from 'react-hook-form'\nimport MethodsFieldArray from './methods-field-array'\nimport { SiderContext } from './sider/sider-context'\nimport Textarea from './textarea'\nexport interface StepFormProps {\n  title: string\n  methods: { timeStamp: string; content: string }[]\n}\n\nconst defaultValues: StepFormProps = {\n  title: '',\n  methods: [{ content: '', timeStamp: '' }],\n}\n\nconst mockData: StepFormProps[] = [\n  {\n    title: 'test1',\n    methods: [{ content: 'asdfasdf', timeStamp: '' }],\n  },\n  {\n    title: 'test2',\n    methods: [{ content: '13213213', timeStamp: '' }],\n  },\n  {\n    title: 'test3',\n    methods: [{ content: 'good', timeStamp: '' }],\n  },\n]\n\nexport default function StepForm(): JSX.Element {\n  return (\n    <form\n      // id={`step_${id}_form`}\n      className=\"flex flex-col space-y-12\"\n      // onSubmit={methods.handleSubmit(onSubmit)}\n    >\n      <label>\n        <p className=\"label-required\">Step Title</p>\n        <Textarea name=\"title\" maxLength={100} rows={2} />\n      </label>\n      <div>\n        <p className=\"label-required\">Methods</p>\n        <MethodsFieldArray name=\"methods\" />\n      </div>\n    </form>\n  )\n}\n"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime", "import_jsx_dev_runtime"]
}
